# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from SkillMate/Mouse3dCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Mouse3dCommand(genpy.Message):
  _md5sum = "691d3678a4135784240deeb965f6f776"
  _type = "SkillMate/Mouse3dCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 type

int32 x
int32 y
int32 z

int32 rx
int32 ry
int32 rz

int32 press
int32 button
"""
  __slots__ = ['type','x','y','z','rx','ry','rz','press','button']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,x,y,z,rx,ry,rz,press,button

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mouse3dCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.z is None:
        self.z = 0
      if self.rx is None:
        self.rx = 0
      if self.ry is None:
        self.ry = 0
      if self.rz is None:
        self.rz = 0
      if self.press is None:
        self.press = 0
      if self.button is None:
        self.button = 0
    else:
      self.type = 0
      self.x = 0
      self.y = 0
      self.z = 0
      self.rx = 0
      self.ry = 0
      self.rz = 0
      self.press = 0
      self.button = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.type, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.press, _x.button))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.type, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.press, _x.button,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.type, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.press, _x.button))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.type, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.press, _x.button,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9i = struct.Struct("<9i")
