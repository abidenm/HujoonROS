# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RobotCatheter/catheterState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class catheterState(genpy.Message):
  _md5sum = "f3c53653df893edbb0c4f4974144a507"
  _type = "RobotCatheter/catheterState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[4] Displacement
uint16[4] Tension
uint16[4] Current
uint16 LightPower
"""
  __slots__ = ['Displacement','Tension','Current','LightPower']
  _slot_types = ['float32[4]','uint16[4]','uint16[4]','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Displacement,Tension,Current,LightPower

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(catheterState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Displacement is None:
        self.Displacement = [0.,0.,0.,0.]
      if self.Tension is None:
        self.Tension = [0,0,0,0]
      if self.Current is None:
        self.Current = [0,0,0,0]
      if self.LightPower is None:
        self.LightPower = 0
    else:
      self.Displacement = [0.,0.,0.,0.]
      self.Tension = [0,0,0,0]
      self.Current = [0,0,0,0]
      self.LightPower = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_4f.pack(*self.Displacement))
      buff.write(_struct_4H.pack(*self.Tension))
      buff.write(_struct_4H.pack(*self.Current))
      buff.write(_struct_H.pack(self.LightPower))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.Displacement = _struct_4f.unpack(str[start:end])
      start = end
      end += 8
      self.Tension = _struct_4H.unpack(str[start:end])
      start = end
      end += 8
      self.Current = _struct_4H.unpack(str[start:end])
      start = end
      end += 2
      (self.LightPower,) = _struct_H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.Displacement.tostring())
      buff.write(self.Tension.tostring())
      buff.write(self.Current.tostring())
      buff.write(_struct_H.pack(self.LightPower))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.Displacement = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 8
      self.Tension = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=4)
      start = end
      end += 8
      self.Current = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=4)
      start = end
      end += 2
      (self.LightPower,) = _struct_H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_H = struct.Struct("<H")
_struct_4H = struct.Struct("<4H")
