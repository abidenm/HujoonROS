// Generated by gencpp from file SkillMate/HapticCommand.msg
// DO NOT EDIT!


#ifndef SKILLMATE_MESSAGE_HAPTICCOMMAND_H
#define SKILLMATE_MESSAGE_HAPTICCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace SkillMate
{
template <class ContainerAllocator>
struct HapticCommand_
{
  typedef HapticCommand_<ContainerAllocator> Type;

  HapticCommand_()
    : array()
    , btn()  {
      array.assign(0.0);

      btn.assign(0);
  }
  HapticCommand_(const ContainerAllocator& _alloc)
    : array()
    , btn()  {
  (void)_alloc;
      array.assign(0.0);

      btn.assign(0);
  }



   typedef boost::array<double, 6>  _array_type;
  _array_type array;

   typedef boost::array<int32_t, 2>  _btn_type;
  _btn_type btn;




  typedef boost::shared_ptr< ::SkillMate::HapticCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SkillMate::HapticCommand_<ContainerAllocator> const> ConstPtr;

}; // struct HapticCommand_

typedef ::SkillMate::HapticCommand_<std::allocator<void> > HapticCommand;

typedef boost::shared_ptr< ::SkillMate::HapticCommand > HapticCommandPtr;
typedef boost::shared_ptr< ::SkillMate::HapticCommand const> HapticCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::SkillMate::HapticCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::SkillMate::HapticCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace SkillMate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'SkillMate': ['/home/ckim/HujoonROS/src/SkillMate/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::SkillMate::HapticCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::SkillMate::HapticCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SkillMate::HapticCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SkillMate::HapticCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SkillMate::HapticCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SkillMate::HapticCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::SkillMate::HapticCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56596198094ce2af05806d426c471047";
  }

  static const char* value(const ::SkillMate::HapticCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56596198094ce2afULL;
  static const uint64_t static_value2 = 0x05806d426c471047ULL;
};

template<class ContainerAllocator>
struct DataType< ::SkillMate::HapticCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SkillMate/HapticCommand";
  }

  static const char* value(const ::SkillMate::HapticCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::SkillMate::HapticCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] array\n\
int32[2] btn\n\
";
  }

  static const char* value(const ::SkillMate::HapticCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::SkillMate::HapticCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
      stream.next(m.btn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HapticCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SkillMate::HapticCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::SkillMate::HapticCommand_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.array[i]);
    }
    s << indent << "btn[]" << std::endl;
    for (size_t i = 0; i < v.btn.size(); ++i)
    {
      s << indent << "  btn[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.btn[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKILLMATE_MESSAGE_HAPTICCOMMAND_H
