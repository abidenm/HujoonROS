// Generated by gencpp from file SkillMate/Mouse3dCommand.msg
// DO NOT EDIT!


#ifndef SKILLMATE_MESSAGE_MOUSE3DCOMMAND_H
#define SKILLMATE_MESSAGE_MOUSE3DCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace SkillMate
{
template <class ContainerAllocator>
struct Mouse3dCommand_
{
  typedef Mouse3dCommand_<ContainerAllocator> Type;

  Mouse3dCommand_()
    : type(0)
    , x(0)
    , y(0)
    , z(0)
    , rx(0)
    , ry(0)
    , rz(0)
    , press(0)
    , button(0)  {
    }
  Mouse3dCommand_(const ContainerAllocator& _alloc)
    : type(0)
    , x(0)
    , y(0)
    , z(0)
    , rx(0)
    , ry(0)
    , rz(0)
    , press(0)
    , button(0)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _z_type;
  _z_type z;

   typedef int32_t _rx_type;
  _rx_type rx;

   typedef int32_t _ry_type;
  _ry_type ry;

   typedef int32_t _rz_type;
  _rz_type rz;

   typedef int32_t _press_type;
  _press_type press;

   typedef int32_t _button_type;
  _button_type button;




  typedef boost::shared_ptr< ::SkillMate::Mouse3dCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SkillMate::Mouse3dCommand_<ContainerAllocator> const> ConstPtr;

}; // struct Mouse3dCommand_

typedef ::SkillMate::Mouse3dCommand_<std::allocator<void> > Mouse3dCommand;

typedef boost::shared_ptr< ::SkillMate::Mouse3dCommand > Mouse3dCommandPtr;
typedef boost::shared_ptr< ::SkillMate::Mouse3dCommand const> Mouse3dCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::SkillMate::Mouse3dCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace SkillMate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'SkillMate': ['/home/ckim/HujoonROS/src/SkillMate/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::SkillMate::Mouse3dCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SkillMate::Mouse3dCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SkillMate::Mouse3dCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "691d3678a4135784240deeb965f6f776";
  }

  static const char* value(const ::SkillMate::Mouse3dCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x691d3678a4135784ULL;
  static const uint64_t static_value2 = 0x240deeb965f6f776ULL;
};

template<class ContainerAllocator>
struct DataType< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SkillMate/Mouse3dCommand";
  }

  static const char* value(const ::SkillMate::Mouse3dCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n\
\n\
int32 x\n\
int32 y\n\
int32 z\n\
\n\
int32 rx\n\
int32 ry\n\
int32 rz\n\
\n\
int32 press\n\
int32 button\n\
";
  }

  static const char* value(const ::SkillMate::Mouse3dCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.rz);
      stream.next(m.press);
      stream.next(m.button);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mouse3dCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SkillMate::Mouse3dCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::SkillMate::Mouse3dCommand_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z);
    s << indent << "rx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ry);
    s << indent << "rz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rz);
    s << indent << "press: ";
    Printer<int32_t>::stream(s, indent + "  ", v.press);
    s << indent << "button: ";
    Printer<int32_t>::stream(s, indent + "  ", v.button);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKILLMATE_MESSAGE_MOUSE3DCOMMAND_H
