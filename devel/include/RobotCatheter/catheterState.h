// Generated by gencpp from file RobotCatheter/catheterState.msg
// DO NOT EDIT!


#ifndef ROBOTCATHETER_MESSAGE_CATHETERSTATE_H
#define ROBOTCATHETER_MESSAGE_CATHETERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RobotCatheter
{
template <class ContainerAllocator>
struct catheterState_
{
  typedef catheterState_<ContainerAllocator> Type;

  catheterState_()
    : Displacement()
    , Tension()
    , Current()
    , LightPower(0)  {
      Displacement.assign(0.0);

      Tension.assign(0);

      Current.assign(0);
  }
  catheterState_(const ContainerAllocator& _alloc)
    : Displacement()
    , Tension()
    , Current()
    , LightPower(0)  {
  (void)_alloc;
      Displacement.assign(0.0);

      Tension.assign(0);

      Current.assign(0);
  }



   typedef boost::array<float, 4>  _Displacement_type;
  _Displacement_type Displacement;

   typedef boost::array<uint16_t, 4>  _Tension_type;
  _Tension_type Tension;

   typedef boost::array<uint16_t, 4>  _Current_type;
  _Current_type Current;

   typedef uint16_t _LightPower_type;
  _LightPower_type LightPower;




  typedef boost::shared_ptr< ::RobotCatheter::catheterState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RobotCatheter::catheterState_<ContainerAllocator> const> ConstPtr;

}; // struct catheterState_

typedef ::RobotCatheter::catheterState_<std::allocator<void> > catheterState;

typedef boost::shared_ptr< ::RobotCatheter::catheterState > catheterStatePtr;
typedef boost::shared_ptr< ::RobotCatheter::catheterState const> catheterStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RobotCatheter::catheterState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RobotCatheter::catheterState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace RobotCatheter

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'RobotCatheter': ['/home/ckim/HujoonROS/src/RobotCatheter/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::RobotCatheter::catheterState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCatheter::catheterState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RobotCatheter::catheterState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RobotCatheter::catheterState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCatheter::catheterState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCatheter::catheterState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RobotCatheter::catheterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3c53653df893edbb0c4f4974144a507";
  }

  static const char* value(const ::RobotCatheter::catheterState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3c53653df893edbULL;
  static const uint64_t static_value2 = 0xb0c4f4974144a507ULL;
};

template<class ContainerAllocator>
struct DataType< ::RobotCatheter::catheterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotCatheter/catheterState";
  }

  static const char* value(const ::RobotCatheter::catheterState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RobotCatheter::catheterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] Displacement\n\
uint16[4] Tension\n\
uint16[4] Current\n\
uint16 LightPower\n\
";
  }

  static const char* value(const ::RobotCatheter::catheterState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RobotCatheter::catheterState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Displacement);
      stream.next(m.Tension);
      stream.next(m.Current);
      stream.next(m.LightPower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct catheterState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RobotCatheter::catheterState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RobotCatheter::catheterState_<ContainerAllocator>& v)
  {
    s << indent << "Displacement[]" << std::endl;
    for (size_t i = 0; i < v.Displacement.size(); ++i)
    {
      s << indent << "  Displacement[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Displacement[i]);
    }
    s << indent << "Tension[]" << std::endl;
    for (size_t i = 0; i < v.Tension.size(); ++i)
    {
      s << indent << "  Tension[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Tension[i]);
    }
    s << indent << "Current[]" << std::endl;
    for (size_t i = 0; i < v.Current.size(); ++i)
    {
      s << indent << "  Current[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Current[i]);
    }
    s << indent << "LightPower: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LightPower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTCATHETER_MESSAGE_CATHETERSTATE_H
